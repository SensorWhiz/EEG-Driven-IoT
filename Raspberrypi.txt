import serial
import time
from RPLCD.gpio import CharLCD
import RPi.GPIO as GPIO
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
import joblib

# Load ML model and vectorizer
model = joblib.load('model.pkl')
vectorizer = joblib.load('vectorizer.pkl')

# Setup LCD (adjust pins as per your config)
lcd = CharLCD(numbering_mode=GPIO.BCM,
              cols=16, rows=2,
              pin_rs=17, pin_e=18,
              pins_data=[22, 23, 24, 27])

# Setup Serial
ser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)
time.sleep(2)

# Buffer for storing last 5 messages
message_buffer = []

try:
    while True:
        if ser.in_waiting:
            line = ser.readline().decode('utf-8').strip()
            if ',' in line:
                s1, s2 = line.split(',')

                # 1. Show on LCD
                lcd.clear()
                lcd.write_string(s1[:16])
                lcd.cursor_pos = (1, 0)
                lcd.write_string(s2[:16])

                # 2. Save message to buffer
                combined = s1 + " " + s2
                message_buffer.append(combined)

                # Keep only last 5
                if len(message_buffer) > 5:
                    message_buffer.pop(0)

                # 3. Once we have 5 messages, run ML
                if len(message_buffer) == 5:
                    full_text = " ".join(message_buffer)
                    X = vectorizer.transform([full_text])
                    prediction = model.predict(X)

                    # 4. Send decision to Arduino
                    if prediction[0] == 1:
                        print("ML Decision: RELAY ON")
                        ser.write(b'1\n')
                    else:
                        print("ML Decision: RELAY OFF")
                        ser.write(b'0\n')

                    # Optional: Clear buffer if one-time decision
                    # message_buffer.clear()

except KeyboardInterrupt:
    lcd.clear()
    ser.close()
    GPIO.cleanup()
